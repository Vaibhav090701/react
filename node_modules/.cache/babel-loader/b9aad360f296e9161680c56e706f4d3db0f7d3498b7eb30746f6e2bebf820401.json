{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laptop\\\\Desktop\\\\React Assignment\\\\assingment\\\\src\\\\components\\\\posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, Typography, Link, CircularProgress } from '@mui/material';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RedditPosts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/reactjs.json').then(response => response.json()).then(data => {\n      const postsData = data.data.children.map(post => ({\n        title: post.data.title,\n        selftext: post.data.selftext,\n        // Use selftext for Markdown if available\n        selftext_html: post.data.selftext_html || '',\n        // Keep for fallback or if only HTML is available.\n        url: post.data.url,\n        score: post.data.score\n      }));\n      setPosts(postsData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, []);\n  const renderContent = post => {\n    // 1. Try to render Markdown first (preferred)\n    if (post.selftext) {\n      return /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        remarkPlugins: [remarkGfm],\n        children: post.selftext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }, this);\n    }\n    // 2. Fallback to HTML if no Markdown is available (SANITIZE THIS!)\n    else if (post.selftext_html) {\n      // **CRITICAL: Sanitize the HTML before rendering!**\n      const sanitizedHTML = sanitizeHTML(post.selftext_html); // Implement sanitizeHTML\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: sanitizedHTML\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    }\n    // 3. Handle cases where there's no content\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No content available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  };\n\n  // **Crucial: Implement HTML sanitization!**\n  const sanitizeHTML = html => {\n    // Use a library like DOMPurify or sanitize-html\n    // This example uses DOMPurify (install it: npm install dompurify)\n    const createDOMPurify = require('dompurify');\n    const DOMPurify = createDOMPurify(window); // Pass window object\n    return DOMPurify.sanitize(html);\n\n    // Example using sanitize-html (install it: npm install sanitize-html)\n    // const sanitize = require('sanitize-html');\n    // const options = { /* ... your sanitization options ... */ };\n    // return sanitize(html, options);\n\n    // **NEVER** just return the HTML directly!\n    // return html; // DANGEROUS - DO NOT DO THIS!\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h2\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selftext\",\n            children: [renderContent(post), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            children: [\"Score: \", post.score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            href: post.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"post-url\",\n            children: \"Go to post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(RedditPosts, \"RbKeE0iIFzYv1PT2nn3dHnXn06o=\");\n_c = RedditPosts;\nexport default RedditPosts;\nvar _c;\n$RefreshReg$(_c, \"RedditPosts\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardContent","Typography","Link","CircularProgress","ReactMarkdown","remarkGfm","jsxDEV","_jsxDEV","RedditPosts","_s","posts","setPosts","loading","setLoading","fetch","then","response","json","data","postsData","children","map","post","title","selftext","selftext_html","url","score","catch","error","console","renderContent","remarkPlugins","fileName","_jsxFileName","lineNumber","columnNumber","sanitizedHTML","sanitizeHTML","dangerouslySetInnerHTML","__html","html","createDOMPurify","require","DOMPurify","window","sanitize","className","variant","index","component","color","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/laptop/Desktop/React Assignment/assingment/src/components/posts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent, Typography, Link, CircularProgress } from '@mui/material';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport '../App.css';\r\n\r\nconst RedditPosts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('https://www.reddit.com/r/reactjs.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const postsData = data.data.children.map((post) => ({\r\n          title: post.data.title,\r\n          selftext: post.data.selftext, // Use selftext for Markdown if available\r\n          selftext_html: post.data.selftext_html || '', // Keep for fallback or if only HTML is available.\r\n          url: post.data.url,\r\n          score: post.data.score,\r\n        }));\r\n        setPosts(postsData);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const renderContent = (post) => {\r\n    // 1. Try to render Markdown first (preferred)\r\n    if (post.selftext) {\r\n      return <ReactMarkdown remarkPlugins={[remarkGfm]}>{post.selftext}</ReactMarkdown>;\r\n    }\r\n    // 2. Fallback to HTML if no Markdown is available (SANITIZE THIS!)\r\n    else if (post.selftext_html) {\r\n      // **CRITICAL: Sanitize the HTML before rendering!**\r\n      const sanitizedHTML = sanitizeHTML(post.selftext_html); // Implement sanitizeHTML\r\n      return <div dangerouslySetInnerHTML={{ __html: sanitizedHTML }} />;\r\n    }\r\n    // 3. Handle cases where there's no content\r\n    return <p>No content available.</p>;\r\n  };\r\n\r\n\r\n  // **Crucial: Implement HTML sanitization!**\r\n  const sanitizeHTML = (html) => {\r\n    // Use a library like DOMPurify or sanitize-html\r\n    // This example uses DOMPurify (install it: npm install dompurify)\r\n    const createDOMPurify = require('dompurify');\r\n    const DOMPurify = createDOMPurify(window); // Pass window object\r\n    return DOMPurify.sanitize(html);\r\n\r\n    // Example using sanitize-html (install it: npm install sanitize-html)\r\n    // const sanitize = require('sanitize-html');\r\n    // const options = { /* ... your sanitization options ... */ };\r\n    // return sanitize(html, options);\r\n\r\n    // **NEVER** just return the HTML directly!\r\n    // return html; // DANGEROUS - DO NOT DO THIS!\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {loading ? (\r\n        <div className=\"loader-container\">\r\n          <Typography variant=\"h6\" className=\"loading-text\">Loading...</Typography>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        posts.map((post, index) => (\r\n          <div className=\"card-container\" key={index}>\r\n            <Card className=\"card\">\r\n              <CardContent>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                  {post.title}\r\n                </Typography>\r\n\r\n                <div className=\"selftext\">\r\n                  {renderContent(post)} {/* Use the renderContent function */}\r\n                </div>\r\n\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Score: {post.score}\r\n                </Typography>\r\n\r\n                <Link href={post.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"post-url\">\r\n                  Go to post\r\n                </Link>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedditPosts;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,IAAI,EAAEC,gBAAgB,QAAQ,eAAe;AACrF,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdiB,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,MAAMC,SAAS,GAAGD,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACC,GAAG,CAAEC,IAAI,KAAM;QAClDC,KAAK,EAAED,IAAI,CAACJ,IAAI,CAACK,KAAK;QACtBC,QAAQ,EAAEF,IAAI,CAACJ,IAAI,CAACM,QAAQ;QAAE;QAC9BC,aAAa,EAAEH,IAAI,CAACJ,IAAI,CAACO,aAAa,IAAI,EAAE;QAAE;QAC9CC,GAAG,EAAEJ,IAAI,CAACJ,IAAI,CAACQ,GAAG;QAClBC,KAAK,EAAEL,IAAI,CAACJ,IAAI,CAACS;MACnB,CAAC,CAAC,CAAC;MACHhB,QAAQ,CAACQ,SAAS,CAAC;MACnBN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5ChB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,aAAa,GAAIT,IAAI,IAAK;IAC9B;IACA,IAAIA,IAAI,CAACE,QAAQ,EAAE;MACjB,oBAAOjB,OAAA,CAACH,aAAa;QAAC4B,aAAa,EAAE,CAAC3B,SAAS,CAAE;QAAAe,QAAA,EAAEE,IAAI,CAACE;MAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC;IACnF;IACA;IAAA,KACK,IAAId,IAAI,CAACG,aAAa,EAAE;MAC3B;MACA,MAAMY,aAAa,GAAGC,YAAY,CAAChB,IAAI,CAACG,aAAa,CAAC,CAAC,CAAC;MACxD,oBAAOlB,OAAA;QAAKgC,uBAAuB,EAAE;UAAEC,MAAM,EAAEH;QAAc;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpE;IACA;IACA,oBAAO7B,OAAA;MAAAa,QAAA,EAAG;IAAqB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACrC,CAAC;;EAGD;EACA,MAAME,YAAY,GAAIG,IAAI,IAAK;IAC7B;IACA;IACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,WAAW,CAAC;IAC5C,MAAMC,SAAS,GAAGF,eAAe,CAACG,MAAM,CAAC,CAAC,CAAC;IAC3C,OAAOD,SAAS,CAACE,QAAQ,CAACL,IAAI,CAAC;;IAE/B;IACA;IACA;IACA;;IAEA;IACA;EACF,CAAC;EAGD,oBACElC,OAAA;IAAKwC,SAAS,EAAC,WAAW;IAAA3B,QAAA,EACvBR,OAAO,gBACNL,OAAA;MAAKwC,SAAS,EAAC,kBAAkB;MAAA3B,QAAA,gBAC/Bb,OAAA,CAACN,UAAU;QAAC+C,OAAO,EAAC,IAAI;QAACD,SAAS,EAAC,cAAc;QAAA3B,QAAA,EAAC;MAAU;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACzE7B,OAAA,CAACJ,gBAAgB;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,GAEN1B,KAAK,CAACW,GAAG,CAAC,CAACC,IAAI,EAAE2B,KAAK,kBACpB1C,OAAA;MAAKwC,SAAS,EAAC,gBAAgB;MAAA3B,QAAA,eAC7Bb,OAAA,CAACR,IAAI;QAACgD,SAAS,EAAC,MAAM;QAAA3B,QAAA,eACpBb,OAAA,CAACP,WAAW;UAAAoB,QAAA,gBACVb,OAAA,CAACN,UAAU;YAAC+C,OAAO,EAAC,IAAI;YAACE,SAAS,EAAC,IAAI;YAAA9B,QAAA,EACpCE,IAAI,CAACC;UAAK;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eAEb7B,OAAA;YAAKwC,SAAS,EAAC,UAAU;YAAA3B,QAAA,GACtBW,aAAa,CAACT,IAAI,CAAC,EAAC,GAAC;UAAA;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CAAC,eAEN7B,OAAA,CAACN,UAAU;YAAC+C,OAAO,EAAC,OAAO;YAACG,KAAK,EAAC,eAAe;YAAA/B,QAAA,GAAC,SACzC,EAACE,IAAI,CAACK,KAAK;UAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eAEb7B,OAAA,CAACL,IAAI;YAACkD,IAAI,EAAE9B,IAAI,CAACI,GAAI;YAAC2B,MAAM,EAAC,QAAQ;YAACC,GAAG,EAAC,qBAAqB;YAACP,SAAS,EAAC,UAAU;YAAA3B,QAAA,EAAC;UAErF;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC,GAnB4Ba,KAAK;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAoBrC,CACN;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA5FID,WAAW;AAAA+C,EAAA,GAAX/C,WAAW;AA8FjB,eAAeA,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}